<?xml version="1.0" standalone="no"?><?xml-stylesheet type="text/css" href="https://www.processon.com/themes/default/mind/icons/icons.css" ?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xlink="http://www.w3.org/1999/xlink" id="mind-svg-con" width="1979.21875px" height="956px" style="position: absolute; left: 0px; top: 0px; width: 1979.22px; height: 956px; background: rgb(255, 255, 255); z-index: 999;"><defs></defs><g id="svgbackgroundid"><defs></defs><rect x="0" y="0" width="1979.21875" height="956" fill="#ffffff"></rect></g><g transform="translate(-9885, -9464)" id="sdjakdjak3"><defs></defs><g class="svg-topic-con" transform="translate(0.5,0.5)"><path part="right" sub="true" id="line_0cb4cc27f0c8a4f5" d="M 10000 9941.5 L 10073 9941.5 C 10113 9941.5 10113 9666 10180 9666" stroke="#0D0B22" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_c5fd97821fcf" d="M 10000 9941.5 L 10073 9941.5 C 10113 9941.5 10113 10126 10180 10126" stroke="#0D0B22" fill="none" stroke-width="2"></path></g><g class="svg-connection-con" transform="translate(0.5,0.5)"></g><g class="svg-freesums-con" transform="translate(0.5,0.5)"></g><g class="svg-freebos-con" transform="translate(0.5,0.5)"></g></g><g id="c5fd97821fcf"><rect x="295" y="640" rx="7px" ry="7px" width="156" height="44" style="fill: #F3F3F4; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="16px" font-weight="normal" fill="rgb(13, 11, 34)" style="font-size:16px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:normal;font-style: normal;"><tspan x="317" y="667.46875"><tspan>创建对象的步骤</tspan></tspan></text></g></g><g id="54c96ca59bda"><rect x="507" y="416.875" rx="1px" ry="1px" width="306" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="436.296875"><tspan>1、判断对象对应的类是否加载、链接、初始化</tspan></tspan></text></g></g><g id="cecef8badac1"><rect x="869.21875" y="398" rx="1px" ry="1px" width="918" height="67" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="878.21875" y="416"><tspan>虚拟机遇到一条new指令，首先去检查这个指令的参数能否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加</tspan></tspan><tspan x="878.21875" y="435.6"><tspan>载、解析和初始。（即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以ClassLoader+包名+类名为key进行查</tspan></tspan><tspan x="878.21875" y="455.20000000000005"><tspan>找对应的.class文件，如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class类对象</tspan></tspan></text></g></g><g id="a1345cc9a256"><rect x="507" y="576.265625" rx="1px" ry="1px" width="138" height="30" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="595.6875"><tspan>2、为对象分配内存</tspan></tspan></text></g></g><g id="b465334ce6ca"><rect x="701.21875" y="499.65625" rx="1px" ry="1px" width="102" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="710.21875" y="519.078125"><tspan>如果内存规整</tspan></tspan></text></g></g><g id="a8bb53791c11"><rect x="859.21875" y="499.65625" rx="1px" ry="1px" width="74" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="868.21875" y="519.078125"><tspan>指针碰撞</tspan></tspan></text></g></g><g id="94819fcd154f"><rect x="989.21875" y="480.78125" rx="1px" ry="1px" width="918" height="67" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="998.21875" y="498.78125"><tspan>如果内存是规整的，那么虚拟机将采用指针碰撞（Bump The Pointer）来为对象分配内存。意思是所有用过的内存放在一边，空闲的内存放在另</tspan></tspan><tspan x="998.21875" y="518.38125"><tspan>一边。中间放着一个指针作为分界点的指示器，分配内存仅把指针向空闲那边挪动一个与对象大小相等的距离。如果垃圾收集器是Serial、ParNe</tspan></tspan><tspan x="998.21875" y="537.98125"><tspan>w这种基于压缩算法的，采用这种方式，一般使用带有compact（整理）过程的收集器时，使用指针碰撞。</tspan></tspan></text></g></g><g id="f5bb0fa3272a"><rect x="701.21875" y="595.15625" rx="1px" ry="1px" width="116" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="710.21875" y="614.578125"><tspan>如果内存不规整</tspan></tspan></text></g></g><g id="d9518d8a4c8d"><rect x="873.21875" y="563.5625" rx="1px" ry="1px" width="172" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="882.21875" y="582.984375"><tspan>虚拟机需要维护一个列表</tspan></tspan></text></g></g><g id="6080fd5e16ea"><rect x="873.21875" y="617.65625" rx="1px" ry="1px" width="102" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="882.21875" y="637.078125"><tspan>空闲列表分配</tspan></tspan></text></g></g><g id="b8a82ce9ca0d"><rect x="1031.21875" y="608.578125" rx="1px" ry="1px" width="918" height="47" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="1040.21875" y="626.578125"><tspan>如果内存是不规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用空闲列表法（Free List）来为对象分配内存。意思是虚拟机维护</tspan></tspan><tspan x="1040.21875" y="646.178125"><tspan>了一个列表，记录哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间分配给对象实例，并更新列表上的内容。</tspan></tspan></text></g></g><g id="5f3090a84b67"><rect x="701.21875" y="671.765625" rx="1px" ry="1px" width="48" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="710.21875" y="691.1875"><tspan>说明</tspan></tspan></text></g></g><g id="3646b9470b0d"><rect x="805.21875" y="671.765625" rx="1px" ry="1px" width="772" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="814.21875" y="691.1875"><tspan>选择哪种方式是由Java堆是否规整决定的，而java堆是否规整又由所采用的的垃圾收集器是否带有压缩整理功能来决定的。</tspan></tspan></text></g></g><g id="379bbd625f14"><rect x="507" y="739.28125" rx="1px" ry="1px" width="152" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="758.703125"><tspan>3、处理并发安全问题</tspan></tspan></text></g></g><g id="370912278862"><rect x="715.21875" y="716.78125" rx="1px" ry="1px" width="269" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="724.21875" y="736.203125"><tspan>采用CAS配上失败重试保证更新的原子性</tspan></tspan></text></g></g><g id="a25c8b0be6f2"><rect x="715.21875" y="761.796875" rx="1px" ry="1px" width="178" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="724.21875" y="781.21875"><tspan>每个线程预分配一块TLAB</tspan></tspan></text></g></g><g id="6a7b56c2dd64"><rect x="949.515625" y="761.796875" rx="1px" ry="1px" width="225" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="958.515625" y="781.21875"><tspan>通过-XX:+/-UseTLAB参数来设定</tspan></tspan></text></g></g><g id="fda46a08c72c"><rect x="507" y="806.8125" rx="1px" ry="1px" width="166" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="826.234375"><tspan>4、初始化分配到的空间</tspan></tspan></text></g></g><g id="754ab3c2b1fc"><rect x="729.21875" y="806.8125" rx="1px" ry="1px" width="410" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="738.21875" y="826.234375"><tspan>所有属性设置零值，保证对象实例字段在不赋值时可以直接使用</tspan></tspan></text></g></g><g id="061232647994"><rect x="507" y="851.828125" rx="1px" ry="1px" width="152" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="871.25"><tspan>5、设置对象的对象头</tspan></tspan></text></g></g><g id="4eed792aa9d1"><rect x="715.21875" y="851.828125" rx="1px" ry="1px" width="753" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="724.21875" y="871.25"><tspan>将对象的所属类（即类的元数据信息）、对象的 HashCode 和对象的 GC 信息、锁信息等数据存储在对象的对象头中。</tspan></tspan></text></g></g><g id="2ee45a5a3a2a"><rect x="507" y="896.84375" rx="1px" ry="1px" width="188" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="916.265625"><tspan>6、执行init方法进行初始化</tspan></tspan></text></g></g><g id="0cb4cc27f0c8a4f5"><rect x="295" y="180.125" rx="7px" ry="7px" width="156" height="44" style="fill: #F3F3F4; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="16px" font-weight="normal" fill="rgb(13, 11, 34)" style="font-size:16px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:normal;font-style: normal;"><tspan x="317" y="207.59375"><tspan>创建对象的方式</tspan></tspan></text></g></g><g id="03d372444e91"><rect x="507" y="75.015625" rx="1px" ry="1px" width="48" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="94.4375"><tspan>new</tspan></tspan></text></g></g><g id="36267aec8977"><rect x="611" y="30" rx="1px" ry="1px" width="102" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="620" y="49.421875"><tspan>最常见的方式</tspan></tspan></text></g></g><g id="2c8ec1682ec0"><rect x="611" y="75.015625" rx="1px" ry="1px" width="161" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="620" y="94.4375"><tspan>变形1：Xxx的静态方法</tspan></tspan></text></g></g><g id="bc5116da1388"><rect x="611" y="120.03125" rx="1px" ry="1px" width="291" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="620" y="139.453125"><tspan>变形2： XxxBulider/XxxFactory的静态方法</tspan></tspan></text></g></g><g id="fc7a50fb91df"><rect x="507" y="165.046875" rx="1px" ry="1px" width="185" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="184.46875"><tspan>Class 的 newInstance（）</tspan></tspan></text></g></g><g id="321432bd9cca"><rect x="748.46875" y="165.046875" rx="1px" ry="1px" width="353" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="757.46875" y="184.46875"><tspan>反射的方式，只能调用空参构造器，权限必须是public</tspan></tspan></text></g></g><g id="13d58fbad77a"><rect x="507" y="210.0625" rx="1px" ry="1px" width="254" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="229.484375"><tspan>Constructor 的 newInstance（Xxx）</tspan></tspan></text></g></g><g id="3335f0a87283"><rect x="816.828125" y="210.0625" rx="1px" ry="1px" width="368" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="825.828125" y="229.484375"><tspan>反射的方式，能调用空参、带参的构造器，权限没有要求</tspan></tspan></text></g></g><g id="59f1f100b539"><rect x="507" y="255.078125" rx="1px" ry="1px" width="110" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="274.5"><tspan>使用clone（）</tspan></tspan></text></g></g><g id="5badbdc95183"><rect x="673.21875" y="255.078125" rx="1px" ry="1px" width="424" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="682.21875" y="274.5"><tspan>不调用任何构造器，当前类需要实现Cloneable接口，实现clone()</tspan></tspan></text></g></g><g id="ae7fbc9d0472"><rect x="507" y="300.09375" rx="1px" ry="1px" width="102" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="319.515625"><tspan>使用反序列化</tspan></tspan></text></g></g><g id="1091d6dd997c"><rect x="665" y="300.09375" rx="1px" ry="1px" width="284" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="674" y="319.515625"><tspan>从文件中、从网络获取一个对象的二进制流</tspan></tspan></text></g></g><g id="4e4f834ac39a"><rect x="507" y="345.109375" rx="1px" ry="1px" width="143" height="29" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:14px;font-family:微软雅黑;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;font-style: normal;"><tspan x="516" y="364.53125"><tspan>第三方库 Objenesis</tspan></tspan></text></g></g><g transform="translate(295, 398)" id="sdjakdjak0"><g id="subline_c5fd97821fcf" transform="translate(0.5,-0.5)"><path id="line_54c96ca59bda" d="M 156 264 L 156 264 C 181 264 181 33 212 33" p="c5fd97821fcf" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_cecef8badac1" d="M 518 33 L 518 33 C 543 33 543 33 574.21875 33" p="54c96ca59bda" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_a1345cc9a256" d="M 156 264 L 156 264 C 181 264 181 193 212 193" p="c5fd97821fcf" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_b465334ce6ca" d="M 350 193 L 350 193 C 375 193 375 116 406.21875 116" p="a1345cc9a256" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_a8bb53791c11" d="M 508.21875 116 L 508.21875 116 C 533.21875 116 533.21875 116 564.21875 116" p="b465334ce6ca" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_94819fcd154f" d="M 638.21875 116 L 638.21875 116 C 663.21875 116 663.21875 116 694.21875 116" p="a8bb53791c11" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_f5bb0fa3272a" d="M 350 193 L 350 193 C 375 193 375 211 406.21875 211" p="a1345cc9a256" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_d9518d8a4c8d" d="M 522.21875 211 L 522.21875 211 C 547.21875 211 547.21875 180 578.21875 180" p="f5bb0fa3272a" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_6080fd5e16ea" d="M 522.21875 211 L 522.21875 211 C 547.21875 211 547.21875 234 578.21875 234" p="f5bb0fa3272a" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_b8a82ce9ca0d" d="M 680.21875 234 L 680.21875 234 C 705.21875 234 705.21875 234 736.21875 234" p="6080fd5e16ea" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_5f3090a84b67" d="M 350 193 L 350 193 C 375 193 375 288 406.21875 288" p="a1345cc9a256" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_3646b9470b0d" d="M 454.21875 288 L 454.21875 288 C 479.21875 288 479.21875 288 510.21875 288" p="5f3090a84b67" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_379bbd625f14" d="M 156 264 L 156 264 C 181 264 181 355 212 355" p="c5fd97821fcf" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_370912278862" d="M 364 355 L 364 355 C 389 355 389 333 420.21875 333" p="379bbd625f14" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_a25c8b0be6f2" d="M 364 355 L 364 355 C 389 355 389 378 420.21875 378" p="379bbd625f14" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_6a7b56c2dd64" d="M 598.21875 378 L 598.21875 378 C 623.21875 378 623.21875 378 654.515625 378" p="a25c8b0be6f2" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_fda46a08c72c" d="M 156 264 L 156 264 C 181 264 181 423 212 423" p="c5fd97821fcf" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_754ab3c2b1fc" d="M 378 423 L 378 423 C 403 423 403 423 434.21875 423" p="fda46a08c72c" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_061232647994" d="M 156 264 L 156 264 C 181 264 181 468 212 468" p="c5fd97821fcf" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_4eed792aa9d1" d="M 364 468 L 364 468 C 389 468 389 468 420.21875 468" p="061232647994" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_2ee45a5a3a2a" d="M 156 264 L 156 264 C 181 264 181 513 212 513" p="c5fd97821fcf" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(295, 30)" id="sdjakdjak1"><g id="subline_0cb4cc27f0c8a4f5" transform="translate(0.5,-0.5)"><path id="line_03d372444e91" d="M 156 172 L 156 172 C 181 172 181 59 212 59" p="0cb4cc27f0c8a4f5" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_36267aec8977" d="M 260 59 L 260 59 C 285 59 285 14 316 14" p="03d372444e91" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_2c8ec1682ec0" d="M 260 59 L 260 59 C 285 59 285 59 316 59" p="03d372444e91" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_bc5116da1388" d="M 260 59 L 260 59 C 285 59 285 104 316 104" p="03d372444e91" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_fc7a50fb91df" d="M 156 172 L 156 172 C 181 172 181 149 212 149" p="0cb4cc27f0c8a4f5" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_321432bd9cca" d="M 397 149 L 397 149 C 422 149 422 149 453.46875 149" p="fc7a50fb91df" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_13d58fbad77a" d="M 156 172 L 156 172 C 181 172 181 194 212 194" p="0cb4cc27f0c8a4f5" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_3335f0a87283" d="M 466 194 L 466 194 C 491 194 491 194 521.828125 194" p="13d58fbad77a" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_59f1f100b539" d="M 156 172 L 156 172 C 181 172 181 239 212 239" p="0cb4cc27f0c8a4f5" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_5badbdc95183" d="M 322 239 L 322 239 C 347 239 347 239 378.21875 239" p="59f1f100b539" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_ae7fbc9d0472" d="M 156 172 L 156 172 C 181 172 181 284 212 284" p="0cb4cc27f0c8a4f5" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_1091d6dd997c" d="M 314 284 L 314 284 C 339 284 339 284 370 284" p="ae7fbc9d0472" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path><path id="line_4e4f834ac39a" d="M 156 172 L 156 172 C 181 172 181 329 212 329" p="0cb4cc27f0c8a4f5" stroke="#0D0B22" stroke-linecap="round" fill="none" stroke-width="2"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(30, 449)" id="sdjakdjak2"><g id="subline_root" transform="translate(0.5,-0.5)"></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g id="root"><rect x="30" y="449" rx="7px" ry="7px" width="170" height="57" style="fill: rgb(13, 11, 34); stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="18px" font-weight="normal" fill="rgb(255, 255, 255)" style="font-size:18px;font-family:微软雅黑;color:#fff;font-style:normal;text-align:left;font-weight:normal;font-style: normal;"><tspan x="70" y="483.546875"><tspan>对象实例化</tspan></tspan></text></g></g></svg>
